Model SmartPlace ; package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } } package SmartPlaceVLD { value type String { } value type Int { } value type Boolean { } value type Void { } value type Real { } enum TemperaturaComandos { ligarArCondicionado , DesligarArCondicionado } enum IluminacaoComandos { ligarIluminacao , desligarIluminacao } enum AtuadorTemperaturaComandos { definirTemperatura } value type TemperaturaCelsius { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } datatype PresencaVisual { attributes : quantPessoas : Int ; operacional : Boolean ; } datatype ArCondicionado { attributes : arCondicionado : TemperaturaComandos ; } datatype Iluminacao { attributes : iluminacao : IluminacaoComandos ; } datatype AtuadorTemperatura { attributes : atuadorTemperatura : AtuadorTemperaturaComandos ; } datatype Presenca { attributes : existePessoas : Boolean ; } } package SmartPlacePTD { import SmartPlaceVLD ; port def TemperaturaIPT { flow in TemperaturaComandos } port def TemperaturaOPT { flow out TemperaturaComandos } port def AtuadorTemperaturaIPT { flow in AtuadorTemperaturaComandos } port def AtuadorTemperaturaOPT { flow out AtuadorTemperaturaComandos } port def IluminacaoIPT { flow in IluminacaoComandos } port def IluminacaoOPT { flow out IluminacaoComandos } } package SmartPlaceCND { import SmartPlacePTD ; connector def TemperaturaComandosCN { participants : ~ TemperaturaComandosIPT : TemperaturaIPT ; ~ TemperaturaComandosOPT : TemperaturaOPT ; flows : TemperaturaComandos from TemperaturaComandosIPT to TemperaturaComandosOPT } connector def AtuadorTemperaturaComandosCN { participants : ~ AtuadorTemperaturaComandosIPT : AtuadorTemperaturaIPT ; ~ AtuadorTemperaturaComandosOPT : AtuadorTemperaturaOPT ; flows : AtuadorTemperaturaComandos from AtuadorTemperaturaComandosIPT to AtuadorTemperaturaComandosOPT } connector def IluminacaoComandosCN { participants : ~ IluminacaoComandosIPT : IluminacaoIPT ; ~ IluminacaoComandosOPT : AtuadorTemperaturaOPT ; flows : IluminacaoComandos from IluminacaoComandosIPT to IluminacaoComandosOPT } } package SmartPlaceCPD { import SmartPlacePTD ;
	component def SistemaGerenciamentoDeAmbientesCP { ports : AtuadorTemperaturaIPT : AtuadorTemperaturaIPT ; } boundary
	component def SensorPresencaCP { } boundary
	component def CameraCP { } boundary
	component def SensorTemperaturaCP { } boundary
	component def AtuadorTemperaturaCP { ports : AtuadorTemperaturaOPT : AtuadorTemperaturaOPT ; } boundary
	component def ArCondicionadoCP { } boundary
	component def IluminacaoCP { } boundary
	component def InterfaceWebCP { } } Requirement GerenciamentoDeAmbiente ( 1 ) { text = "O sistema deve monitorar ar condicionados e lâmpadas de um ambiente. Liga-los quando houver pessoas no ambiente e desliga-los quando não tiver mais ninguém.  deve aumentar e diminuir a temperatura do arcondicionado de acordo com a temperatura desejada pelo usuário, estabelecida em um leitor na entrada da sala." Requirement GerenciamentoDeTemperaturaFR ( 1.1 ) { text = "O sistema deve ser capaz de gerenciar a temperatura do ambiente automaticamente " } Requirement AtivarAmbienteFR ( 1.2 ) { text = "O sistema deve ser capaz de ligar e desligar as luzes e ar condicionados do ambiente automaticamente." } } Requirement DefinirTemperaturaFR ( 1.3 ) { text = "O sistema deve possibilitar ao usuário definir a temperatura desejada para o ambiente." derive GerenciamentoDeAmbiente.GerenciamentoDeTemperaturaFR ; } Requirement VerificarPresencaFR ( 1.4 ) { text = "O sistema deve receber dados do sensores de presenca no ambiente." derive GerenciamentoDeAmbiente.AtivarAmbienteFR ; } Requirement VerificarPresencaVisualFR ( 1.5 ) { text = "O sistema deve ser capaz de contar as pessoas no ambiente." derive VerificarPresencaFR ; }